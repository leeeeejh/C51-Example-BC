C51 COMPILER V9.01   NEW_CODE                                                              05/17/2020 16:21:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE NEW_CODE
OBJECT MODULE PLACED IN new_code.OBJ
COMPILER INVOKED BY: D:\Keli\C51\BIN\C51.EXE new_code.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //多机通信（主机）程序
   2          #include <reg51.h>
   3          #define uchar unsigned char
   4          #define NODE0_ADDR 0        //0#主机地址
   5          #define NODE1_ADDR 1            //1#子机地址
   6          
   7          /*test*/
   8          sbit P1_4=P1^4;
   9          sbit P1_7=P1^7;
  10          
  11          /*矩阵键盘全局变量*/
  12          unsigned char flag_int0 = 0;
  13          //行列式键盘键值
  14          unsigned char key_buf[] = {0xee, 0xde, 0xbe, 0x7e,0xed, 0xdd, 0xbd, 0x7d,0xeb, 0xdb, 0xbb, 0x7b,0xe7, 0xd7
             -, 0xb7, 0x77};
  15          
  16          /*led显示全局变量*/
  17          sbit DULA = P1^0;
  18          sbit WELA = P1^1;
  19          //7led显示字形码(阴极)
  20          unsigned char wordlist[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x7
             -1,0x00};
  21          //led灯位
  22          unsigned char ledlist[] = {0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f};
  23          //默认显示列表
  24          unsigned char display_list[] = {0x40,0x40};
  25          
  26          
  27          /*串口通信全局变量*/
  28          uchar KeyValue=0;                            //键值
  29          uchar send_str[]="HELLO";       //发送字符存储列表
  30          uchar recv_str[]="AAAAA";         //接受字符存储列表
  31          uchar flag_sms = 0;              //收发信息正确标志
  32          uchar pointer_recv = 0;                 //主机当前接收字符指针
  33          uchar flag_recv_done = 0;         //接收完成标志
  34          
  35          void delay(unsigned int i)  //可控时间延迟函数
  36          {
  37   1          unsigned int j;
  38   1          unsigned char k;
  39   1          for(j=i;j>0;j--)
  40   1          {
  41   2              for(k=125;k>0;k--);
  42   2          }
  43   1      }
  44          
  45          void display(unsigned char display_list[],unsigned int time)//led显示函数
  46          {
  47   1          unsigned char i;
  48   1          for(i=0;*(display_list+i);i++)
  49   1          {
  50   2              //选择显示位
  51   2              P0=*(ledlist+i);
  52   2              WELA=1;
  53   2              WELA=0;
C51 COMPILER V9.01   NEW_CODE                                                              05/17/2020 16:21:12 PAGE 2   

  54   2              //输出字符码
  55   2              P0=*(display_list+i);
  56   2              DULA=1;
  57   2              DULA=0;
  58   2              delay(time);
  59   2          }
  60   1      }
  61          
  62          void service_int0(void) interrupt 0//外部中断0：启动键盘扫描
  63          {
  64   1          flag_int0 = 1;
  65   1      }
  66          
  67          unsigned char getKey() //矩阵键盘取值函数
  68          {       unsigned char key_scan[] = {0xef, 0xdf, 0xbf, 0x7f};       //键扫描码
  69   1          unsigned char i = 0, j = 0;
  70   1          for (i = 0;key_scan[i]; i++) 
  71   1          {   
  72   2              P2 = key_scan[i];                                                  //P2送出键扫描码
  73   2              if ((P2 & 0x0f) != 0x0f)                                   //取P2低四位判断有无键闭合
  74   2              {       
  75   3                  delay(100);//消抖
  76   3                  if ((P2 & 0x0f) != 0x0f)               //再次判断键闭合
  77   3                  {
  78   4                      for (j = 0 ; j < 16 ;j++) //低效而方便地遍历查找闭合键键号
  79   4                      {       
  80   5                          if (key_buf[j]==P2)
  81   5                          {
  82   6                              while ((P2 & 0x0f) != 0x0f);//松开按键
  83   6                              return j;
  84   6                          } 
  85   5                      }       
  86   4                  }
  87   3              }
  88   2          }
  89   1          return -1;//无键闭合                                                                   
  90   1      }
  91          
  92          void receive(void) interrupt 4 {    //定时器中断1：串口接收
  93   1              RI=0;
  94   1              if(RB8==1){
  95   2                      if(SBUF==NODE0_ADDR){
  96   3                              SM2=0;
  97   3                      }
  98   2                      return;
  99   2              }
 100   1          //存储到列表
 101   1          *(recv_str+pointer_recv)=SBUF;
 102   1          if(++pointer_recv>4)
 103   1          {
 104   2              flag_recv_done=1;
 105   2              pointer_recv=0;
 106   2          }
 107   1              P1_4=!P1_4;
 108   1              SM2=1;
 109   1      }
 110          
 111          void proc_key(uchar node_number,uchar str[])//发送程序
 112          {
 113   1          switch(node_number) //切换子机
 114   1          {
 115   2              case 1: 
C51 COMPILER V9.01   NEW_CODE                                                              05/17/2020 16:21:12 PAGE 3   

 116   2              {
 117   3                  uchar pointer_1;            //子机当前发送字符指针
 118   3                  for(pointer_1=0;str[pointer_1];pointer_1++)
 119   3                  {
 120   4                      
 121   4                      TB8=1;                          //发送地址帧
 122   4                      SBUF=node_number;   //子机地址
 123   4                      while(TI==0);           //等待地址帧发送结束
 124   4                      TI=0;                           //清TI标志
 125   4                      TB8=0;                          //准备发送数据帧
 126   4                      SBUF=str[pointer_1];    //1#子机字符帧
 127   4                      while(TI==0);           //等待地址帧发送结束
 128   4                      TI=0;                           //清TI标志
 129   4                      delay(1200);        //发送延时
 130   4                  }
 131   3              }
 132   2              default: break;
 133   2          }
 134   1      }
 135          
 136          
 137          
 138          void main()
 139          {
 140   1          /*中断服务初始化*/
 141   1          IE = 0x81;   //10000001|总中断、外部中断0
 142   1          TCON = 0x00; //00000000|中断触发方式
 143   1          /*串口服务初始化*/
 144   1          SCON=0xf0;                  //串口方式3、多机通信、允许接收、中断标志清零
 145   1          TMOD=0x20;                  //T1定时方式2
 146   1          TH1=TL1=0xfd;               //9600bps
 147   1          TR1=1;                              //启动T1
 148   1          ES=1;EA=1;              //开中断
 149   1          /*其余服务初始化*/
 150   1          P1=0xff;   //复位关闭全部LED
 151   1          P2=0x0f;    //键盘待触发状态
 152   1          while (1)
 153   1          {
 154   2              if(flag_int0)
 155   2              {
 156   3                  unsigned char key;
 157   3                  key = getKey();
 158   3                  switch(key)//切换子机
 159   3                  {                     
 160   4                      case 0x00: proc_key(NODE1_ADDR,send_str);break;
 161   4                      default: break;
 162   4                  }
 163   3                  P2=0x0f;    //键盘待触发状态
 164   3                  flag_int0 = 0;//flag复位
 165   3              }
 166   2              if(flag_recv_done)
 167   2              {
 168   3                  unsigned char i;    //校验指针
 169   3                  for(i=0;send_str[i];i++)
 170   3                  {
 171   4                      if(send_str[i]!=recv_str[i])    //收发不一致
 172   4                      {
 173   5                          display_list[0] = 0x54;
 174   5                          display_list[1] = 0x5c;
 175   5                          flag_recv_done = 0; //标志位置零
 176   5                          break;
 177   5                      }
C51 COMPILER V9.01   NEW_CODE                                                              05/17/2020 16:21:12 PAGE 4   

 178   4                  }
 179   3                  //收发一致
 180   3                  display_list[0] = 0x76;
 181   3                  display_list[1] = 0x06;
 182   3                  flag_recv_done = 0; //标志位置零
 183   3              }
 184   2              display(display_list,20);
 185   2          }    
 186   1      }
 187          
 188          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    423    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     60      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
